
    _/_/_/                          
 _/        _/_/_/_/_/  _/_/_/_/_/   
_/                                  
 _/_/_/ 



GENERAL IDEA
c--, a top-down shooter, comprises a player repelling swarms of 
encroaching enemies; weapons, grenades, and health-pickups 
periodically appear, in order to aid the player in combating 
progressively stronger opponents. c--, however, relies on a 
unique mechanic to diversify gameplay: the speed of light 
linearly decreases. Thus, as the player survives for lengthier 
periods of time, the effects of special relativity gradually 
become more profoud: geometry distorts, colors striate, and 
movements are visually misrepresented. 


REPLICATING AN EXISTING GAME?
c-- draws inspiration from "A Slower Speed of Light," produced 
by MIT Game Labs; our graphics mimick Geometry Wars's.


INCORPORATION OF APCS TOPICS
c-- exploits Java's object-oriented functionality by allowing 
numerous actors to dynamically interact: object instantiation 
allows for the constant population of a game board with newly 
generated actors. The game's class-map comprises a multi-echelon 
hierarchy of interfaces, abstract classes, and corresponding 
subclasses, facilitating organization and incremental coding. 
c--'s engine utilizes ArrayLists containing actors and usable 
objects, and parses either container when updating the Java 
GUI (issuing appropriate method calls to individual members). 


PROOF OF PRINCIPLE
c--'s physics engine employs the rudimentary mathematics of 
special relativity- "A Slower Speed of Light," produced by 
MIT Game Labs, employs similar underlying mechanics. The 
game itself employs a dynamic, multi-actor environment easily
implemented with Java.


MAJOR COMPONENTS
c-- primarily comprises: the laws of special relativity (i.e. 
Lorentz transformations); thus, the player will experience 
geometric distortion and simulated color shifts. Gameplay 
will consist of typical swarm-shooter violence: the player
repels various enemy waves with diverse weaponry, and enjoy 
temporary buffs/augmentations. 


DIVISION OF LABOR / TASK DELEGATION
Sebastian Conybeare will implement the c-- physics engine; 
Zane Sterling will construct the graphics and update
infrastructures; Severyn Kozak will structure usable object 
and actor classes. 
